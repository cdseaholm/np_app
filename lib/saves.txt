FormHelper.inputFieldWidget(
            context,
            "username",
            "Username",
            (onValidateVal) {
              if (onValidateVal.isEmpty) {
                setState(() {
                  userNameError = 'Username does not exist';
                });
              } else {
                setState(() {
                  userNameError = null;
                });
              }
              return null;
            },
            (onSavedVal) {
              model.userName = onSavedVal;
            },
            initialValue: "",
            paddingBottom: 20,
            prefixIcon: const Icon(Icons.account_circle),
            showPrefixIcon: true,
          ),
          if (userNameError != null)
            Text(
              userNameError!,
              style: const TextStyle(color: Colors.red),
            ),
          FormHelper.inputFieldWidget(
              context,
              "password",
              "Password",
              (onValidateVal) {
                if (onValidateVal.isEmpty) {
                  setState(() {
                    passwordError = 'Password cant be empty';
                  });
                } else if (onValidateVal.length < 5) {
                  setState(() {
                    passwordError = 'Password must be at least 5 characters';
                  });
                } else {
                  setState(() {
                    passwordError = null;
                  });
                }

                return null;
              },
              (onSavedVal) {
                model.password = onSavedVal;
              },
              initialValue: "",
              paddingBottom: 20,
              obscureText: hidePassword,
              suffixIcon: IconButton(
                  onPressed: () {
                    setState(() {
                      hidePassword = !hidePassword;
                    });
                  },
                  color: Colors.redAccent.withOpacity(.4),
                  icon: Icon(
                      hidePassword ? Icons.visibility_off : Icons.visibility)),
              prefixIcon: const Icon(Icons.lock),
              showPrefixIcon: true,
              onChange: (val) {
                model.password = val;
              }),
          if (passwordError != null)
            Text(
              passwordError!,
              style: const TextStyle(color: Colors.red),
            ),

            user_reg:

            import 'package:email_validator/email_validator.dart';
import 'package:flutter/material.dart';
import 'package:np_app/models/user_model.dart';
import 'package:snippet_coder_utils/FormHelper.dart';
import 'package:snippet_coder_utils/hex_color.dart';

import '../../backend/api_services.dart';
import '../../pages/logged_in_homepage.dart';
import '../../pages/logged_out_homepage.dart';
import 'login.dart';

class UserRegister extends StatefulWidget {
  const UserRegister({super.key});

  @override
  State<UserRegister> createState() => _UserRegisterState();
}

class _UserRegisterState extends State<UserRegister> {
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  final GlobalKey<FormState> globalKey = GlobalKey<FormState>();

  bool isApiCallProcess = false;
  bool hidePassword = true;
  bool hideConfirmPassword = true;
  UserModel model = UserModel(
    userName: '',
    emailId: '',
    password: '',
    confirmPassword: '',
  );

  String? userName;
  String? emailId;
  String? password;
  String? confirmPassword;

  String? userNameError;
  String? emailError;
  String? passwordError;
  String? confirmPasswordError;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      backgroundColor: Colors.grey[200],
      key: _scaffoldKey,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            registerUISetup(),
            const SizedBox(height: 16),
            Visibility(
              visible: isApiCallProcess,
              child: const CircularProgressIndicator(),
            ),
          ],
        ),
      ),
    );
  }

  Widget registerUISetup() {
    return SingleChildScrollView(
        child: Form(
      key: globalKey,
      child: _registerUI(context),
    ));
  }

  Widget _registerUI(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Container(
          padding: const EdgeInsets.only(top: 20),
          width: MediaQuery.of(context).size.width,
          height: MediaQuery.of(context).size.height / 4.5,
          decoration: BoxDecoration(
            color: HexColor("#053514"),
            borderRadius: const BorderRadius.only(
              bottomRight: Radius.circular(
                150,
              ),
            ),
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Center(
                child: Image.asset(
                  'assets/Images/nplogo.png',
                  fit: BoxFit.contain,
                  width: 60,
                ),
              ),
              const SizedBox(height: 16),
              const Center(
                child: Text(
                  "NewProgress",
                  style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 20,
                      color: Colors.white),
                ),
              ),
            ],
          ),
        ),
        const Center(
          child: Padding(
            padding: EdgeInsets.only(bottom: 20, top: 40),
            child: Text(
              "User Signup",
              style: TextStyle(fontWeight: FontWeight.bold, fontSize: 25),
            ),
          ),
        ),
        FormHelper.inputFieldWidget(
          context,
          "username",
          "Username",
          (onValidateVal) {
            if (onValidateVal.isEmpty) {
              setState(() {
                userNameError = 'Username cannot be empty';
              });
            } else if (onValidateVal.length < 4) {
              setState(() {
                userNameError = 'Username must be at least 4 characters';
              });
            } else {
              setState(() {
                userNameError = null;
              });
            }
            return null;
          },
          (onSavedVal) {
            model.userName = onSavedVal;
          },
          initialValue: "",
          paddingBottom: 20,
          prefixIcon: const Icon(Icons.account_circle),
          showPrefixIcon: true,
        ),
        if (userNameError != null)
          Text(
            userNameError!,
            style: const TextStyle(color: Colors.red),
          ),
        FormHelper.inputFieldWidget(
          context,
          "email",
          "Email",
          (onValidateVal) {
            if (onValidateVal.isEmpty) {
              setState(() {
                emailError = 'Email cannot be empty';
              });
            } else if (EmailValidator.validate(onValidateVal)) {
              setState(() {
                emailError = null;
              });
            } else {
              setState(() {
                emailError = 'Invalid email format';
              });
            }
            return null;
          },
          (onSavedVal) {
            model.emailId = onSavedVal;
          },
          initialValue: "",
          paddingBottom: 20,
          prefixIcon: const Icon(Icons.email),
          showPrefixIcon: true,
        ),
        if (emailError != null)
          Text(
            emailError!,
            style: const TextStyle(color: Colors.red),
          ),
        FormHelper.inputFieldWidget(
            context,
            "password",
            "Password",
            (onValidateVal) {
              if (onValidateVal.isEmpty) {
                setState(() {
                  passwordError = 'Password cant be empty';
                });
              } else if (onValidateVal.length < 5) {
                setState(() {
                  passwordError = 'Password must be at least 5 characters';
                });
              } else {
                setState(() {
                  passwordError = null;
                });
              }

              return null;
            },
            (onSavedVal) {
              model.password = onSavedVal;
            },
            initialValue: "",
            paddingBottom: 20,
            obscureText: hidePassword,
            suffixIcon: IconButton(
                onPressed: () {
                  setState(() {
                    hidePassword = !hidePassword;
                  });
                },
                color: Colors.redAccent.withOpacity(.4),
                icon: Icon(
                    hidePassword ? Icons.visibility_off : Icons.visibility)),
            prefixIcon: const Icon(Icons.lock),
            showPrefixIcon: true,
            onChange: (val) {
              model.password = val;
            }),
        if (passwordError != null)
          Text(
            passwordError!,
            style: const TextStyle(color: Colors.red),
          ),
        FormHelper.inputFieldWidget(
          context,
          "confirm password",
          "Confirm Password",
          (onValidateVal) {
            if (onValidateVal.isEmpty) {
              setState(() {
                confirmPasswordError = 'Confirm Password cannot be empty';
              });
            } else if (onValidateVal != model.password) {
              setState(() {
                confirmPasswordError = 'Passwords do not match!';
              });
            } else {
              setState(() {
                confirmPasswordError = null;
              });
            }
            return null;
          },
          (onSavedVal) {
            model.confirmPassword = onSavedVal;
          },
          initialValue: "",
          paddingBottom: 20,
          obscureText: hideConfirmPassword,
          suffixIcon: IconButton(
              onPressed: () {
                setState(() {
                  hideConfirmPassword = !hideConfirmPassword;
                });
              },
              color: Colors.redAccent.withOpacity(.4),
              icon: Icon(hideConfirmPassword
                  ? Icons.visibility_off
                  : Icons.visibility)),
          prefixIcon: const Icon(Icons.lock),
          showPrefixIcon: true,
          onChange: (val) {
            model.confirmPassword = val;
          },
        ),
        if (confirmPasswordError != null)
          Text(
            confirmPasswordError!,
            style: const TextStyle(color: Colors.red),
          ),
        const SizedBox(
          height: 20,
        ),
        Center(
          child: FormHelper.submitButton("Register", () {
            if (validateAndSave()) {
              setState(() {
                isApiCallProcess = true;
              });

              APIServices.registerUser(model)
                  .then((UserResponseModel responseModel) {
                setState(() {
                  isApiCallProcess = false;
                });

                if (responseModel.existingUsername) {
                  FormHelper.showSimpleAlertDialog(
                    context,
                    "Couldn't Create Account",
                    "Username Already Exists",
                    "Back",
                    () {
                      Navigator.of(context).pop();
                    },
                  );
                } else if (responseModel.existingEmail) {
                  FormHelper.showSimpleAlertDialog(
                    context,
                    "Couldn't Create Account",
                    "Email Already in Use",
                    "Back",
                    () {
                      Navigator.of(context).pop();
                    },
                  );
                } else if (responseModel.id != null) {
                  FormHelper.showSimpleAlertDialog(
                    context,
                    "Registered",
                    "Account Registered",
                    "Go to NewProgress Home",
                    () {
                      Navigator.of(context).pop();
                      Navigator.pushReplacement(
                        context,
                        MaterialPageRoute(
                            builder: (_) => const LoggedInHomePage()),
                      );
                    },
                  );
                }
              });
            }
          }),
        ),
        Align(
          alignment: Alignment.centerLeft,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Padding(
                padding: const EdgeInsets.only(left: 20),
                child: TextButton(
                  onPressed: () {
                    Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(
                          builder: (_) => const LoggedOutHomePage()),
                    );
                  },
                  child: const Text('Return Home'),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(right: 20),
                child: TextButton(
                  onPressed: () {
                    Navigator.pushReplacement(
                      context,
                      MaterialPageRoute(builder: (_) => const LoginScreen()),
                    );
                  },
                  child: const Text('Return to Login'),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  bool validateAndSave() {
    final form = globalKey.currentState;
    if (form != null && form.validate()) {
      form.save();

      if (model.password != model.confirmPassword) {
        setState(() {
          confirmPasswordError = "Password and Confirm Password must match";
        });

        return false;
      }

      return true;
    } else {
      setState(() {
        userNameError =
            model.userName.isEmpty ? 'Username cannot be empty' : null;
        emailError = model.emailId.isEmpty ? 'Email cannot be empty' : null;
        passwordError =
            model.password.isEmpty ? 'Password cannot be empty' : null;
        confirmPasswordError = model.confirmPassword.isEmpty
            ? 'Confirm Password cannot be empty'
            : null;
      });

      return false;
    }
  }
}

from login: 

final _scaffoldKey = GlobalKey<ScaffoldState>();
  final GlobalKey<FormState> globalKey = GlobalKey<FormState>();

  bool isApiCallProcess = false;
  bool hidePassword = true;
  bool hideConfirmPassword = true;
  bool _remainSignedIn = false;

  UserLoginModel model = UserLoginModel(
    userName: '',
    password: '',
  );

  String? userName;
  String? password;

  String? userNameError;
  String? passwordError;
**
              Visibility(
              visible: isApiCallProcess,
              child: const CircularProgressIndicator(),

              _remainSignedIn:
              Align(
                alignment: Alignment.centerLeft,
                child: Padding(
                  padding: const EdgeInsets.only(left: 10),
                  child: CheckboxListTile(
                    title: const Text('Remain Signed In'),
                    value: _remainSignedIn,
                    onChanged: (value) {
                      setState(() {
                        _remainSignedIn = value!;
                      });
                    },
                  ),
                ),
              ),

in sign in:                     if (globalKey.currentState!.validate()) {
                      if (_remainSignedIn) {
                        // Store user token or session for 30 days
                      }
                  
stay signed in: 

Align(
                alignment: Alignment.centerLeft,
                child: Padding(
                  padding: const EdgeInsets.only(left: 10),
                  child: CheckboxListTile(
                    title: const Text('Remain Signed In'),
                    value: _remainSignedIn,
                    onChanged: (value) {
                      setState(() {
                        _remainSignedIn = value!;
                      });
                    },
                  ),
                ),
              ),